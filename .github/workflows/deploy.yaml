name: Deploy Weather Service

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # This step should come before the "Build and push Docker image" step
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: madsakselsen/weather-service:latest

      # app.env is used in docker-compose.prod.yml
      - name: Create env file
        run: |
          echo "REDIS_ADDR=redis:6379" > app.env  # Use > to overwrite/create new file
          echo "X_RAPID_API_KEY=${{ secrets.X_RAPID_API_KEY }}" >> app.env
          echo "WEATHER_API_KEY=${{ secrets.WEATHER_API_KEY }}" >> app.env

      - name: List files
        run: ls -l ${{ github.workspace }}

      # Adjust this step to also transfer the app.env file
      - name: Transfer configuration to Droplet
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: 2354
          # Now transferring both docker-compose.prod.yml and app.env
          source: |
            ./docker-compose.prod.yml
            ./app.env
          target: "~/weather-project/"

      - name: Deploy to Droplet
        uses: appleboy/ssh-action@master
        with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USERNAME }}
            port: 2354
            key: ${{ secrets.SSH_KEY }}
            script: |
              cd ~/weather-project
              # Stop and remove containers, networks, and images used by the previous deployment
              docker-compose down --rmi all
              # Pull the latest images
              docker-compose -f docker-compose.prod.yml pull
              # Start the new deployment
              docker-compose -f docker-compose.prod.yml up -d
